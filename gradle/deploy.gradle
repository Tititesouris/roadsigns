apply plugin: "digital.wup.android-maven-publish"

publishing {
    publications {
        local(MavenPublication) {
            from components.android
            groupId project.groupId
            artifactId project.artifactId
            version = project.versionName
        }
    }
}

apply plugin: "com.jfrog.bintray"

group = project.groupId
version = project.versionName

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    def paths = android.getBootClasspath()
    classpath += project.files(paths.join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

publishing {
    publications {
        bintray(MavenPublication) {
            artifact "$buildDir/outputs/aar/${project.artifactId}-release.aar"
            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")

                // Iterate over the implementation dependencies (we don"t want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != "unspecified") {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", it.group)
                        dependencyNode.appendNode("artifactId", it.name)
                        dependencyNode.appendNode("version", it.version)
                    }
                }
            }
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
def propertiesFile = project.rootProject.file("${System.properties['user.home']}/.gradle/gradle.properties")
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}
def bintrayUser = properties.getProperty("bintrayUser") ?: System.getenv("BINTRAY_USER")
def bintrayApiKey = properties.getProperty("bintrayApiKey") ?: System.getenv("BINTRAY_API_KEY")

bintray {
    user = bintrayUser
    key = bintrayApiKey
    configurations = ["archives"]
    publications = ["bintray"]
    override = true
    publish = true
    dryRun = false

    pkg {
        repo = project.packageRepository
        name = project.packageName
        desc = project.packageDescription
        websiteUrl = project.packageWebsiteUrl
        issueTrackerUrl = project.packageIssueTrackingUrl
        vcsUrl = project.packageVcsUrl
        licenses = project.packageLicenses
        labels = project.packageLabels

        publicDownloadNumbers = true
        version {
            name = project.versionName
            desc = project.versionDescription
            released = new Date()
            vcsTag = project.versionVcsTag
        }
    }
}

// Ensure the *.pom is generated before the artifacts are uploaded.
bintrayUpload.dependsOn(generatePomFileForBintrayPublication)
